// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/projectrol.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UsersService_CreateUser_FullMethodName         = "/protos.UsersService/CreateUser"
	UsersService_Login_FullMethodName              = "/protos.UsersService/Login"
	UsersService_GetUserById_FullMethodName        = "/protos.UsersService/GetUserById"
	UsersService_UpdateUserSettings_FullMethodName = "/protos.UsersService/UpdateUserSettings"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUserSettings(ctx context.Context, in *UserSettings, opts ...grpc.CallOption) (*UserSettings, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UsersService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserSettings(ctx context.Context, in *UserSettings, opts ...grpc.CallOption) (*UserSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSettings)
	err := c.cc.Invoke(ctx, UsersService_UpdateUserSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	Login(context.Context, *LoginRequest) (*User, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*User, error)
	UpdateUserSettings(context.Context, *UserSettings) (*UserSettings, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *LoginRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) GetUserById(context.Context, *GetUserByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserSettings(context.Context, *UserSettings) (*UserSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSettings not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateUserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserSettings(ctx, req.(*UserSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UsersService_GetUserById_Handler,
		},
		{
			MethodName: "UpdateUserSettings",
			Handler:    _UsersService_UpdateUserSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/projectrol.proto",
}

const (
	WorkspacesService_CreateWorkspace_FullMethodName              = "/protos.WorkspacesService/CreateWorkspace"
	WorkspacesService_GetWorkspacesByUserId_FullMethodName        = "/protos.WorkspacesService/GetWorkspacesByUserId"
	WorkspacesService_GetRoleIdOfUserWorkspaces_FullMethodName    = "/protos.WorkspacesService/GetRoleIdOfUserWorkspaces"
	WorkspacesService_GetWorkspaceDetails_FullMethodName          = "/protos.WorkspacesService/GetWorkspaceDetails"
	WorkspacesService_GetWorkspaceRoles_FullMethodName            = "/protos.WorkspacesService/GetWorkspaceRoles"
	WorkspacesService_CreateCalendarEvent_FullMethodName          = "/protos.WorkspacesService/CreateCalendarEvent"
	WorkspacesService_CreateProject_FullMethodName                = "/protos.WorkspacesService/CreateProject"
	WorkspacesService_GetProjectsByWorkspaceId_FullMethodName     = "/protos.WorkspacesService/GetProjectsByWorkspaceId"
	WorkspacesService_GetProjectDetails_FullMethodName            = "/protos.WorkspacesService/GetProjectDetails"
	WorkspacesService_GetPermissions_FullMethodName               = "/protos.WorkspacesService/GetPermissions"
	WorkspacesService_UpdateRolePermission_FullMethodName         = "/protos.WorkspacesService/UpdateRolePermission"
	WorkspacesService_GetUserRoleInWorkspace_FullMethodName       = "/protos.WorkspacesService/GetUserRoleInWorkspace"
	WorkspacesService_CheckRoleValidForResource_FullMethodName    = "/protos.WorkspacesService/CheckRoleValidForResource"
	WorkspacesService_CheckUserHasAccessToProject_FullMethodName  = "/protos.WorkspacesService/CheckUserHasAccessToProject"
	WorkspacesService_CreateNewRole_FullMethodName                = "/protos.WorkspacesService/CreateNewRole"
	WorkspacesService_GetWorkspaceMembers_FullMethodName          = "/protos.WorkspacesService/GetWorkspaceMembers"
	WorkspacesService_CreateTask_FullMethodName                   = "/protos.WorkspacesService/CreateTask"
	WorkspacesService_UpdateTask_FullMethodName                   = "/protos.WorkspacesService/UpdateTask"
	WorkspacesService_GetProjectTasks_FullMethodName              = "/protos.WorkspacesService/GetProjectTasks"
	WorkspacesService_CreateProjectDocument_FullMethodName        = "/protos.WorkspacesService/CreateProjectDocument"
	WorkspacesService_GetProjectDocuments_FullMethodName          = "/protos.WorkspacesService/GetProjectDocuments"
	WorkspacesService_GetProjectDocumentDetails_FullMethodName    = "/protos.WorkspacesService/GetProjectDocumentDetails"
	WorkspacesService_UpdateProjectDocumentDetails_FullMethodName = "/protos.WorkspacesService/UpdateProjectDocumentDetails"
	WorkspacesService_GetProjectTaskDetails_FullMethodName        = "/protos.WorkspacesService/GetProjectTaskDetails"
)

// WorkspacesServiceClient is the client API for WorkspacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspacesServiceClient interface {
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	GetWorkspacesByUserId(ctx context.Context, in *GetWorkspacesByUserIdRequest, opts ...grpc.CallOption) (*GetWorkspacesByUserIdResponse, error)
	GetRoleIdOfUserWorkspaces(ctx context.Context, in *GetRoleIdOfUserWorkspacesRequest, opts ...grpc.CallOption) (*GetRoleIdOfUserWorkspacesResponse, error)
	GetWorkspaceDetails(ctx context.Context, in *GetWorkspaceDetailsRequest, opts ...grpc.CallOption) (*GetWorkspaceDetailsResponse, error)
	GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRolesRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error)
	CreateCalendarEvent(ctx context.Context, in *CreateCalendarEventRequest, opts ...grpc.CallOption) (*CreateCalendarEventResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetProjectsByWorkspaceId(ctx context.Context, in *GetProjectsByWorkspaceIdRequest, opts ...grpc.CallOption) (*GetProjectsByWorkspaceIdResponse, error)
	GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*GetProjectDetailsResponse, error)
	GetPermissions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	UpdateRolePermission(ctx context.Context, in *UpdateRolePermissionRequest, opts ...grpc.CallOption) (*UpdateRolePermissionResponse, error)
	GetUserRoleInWorkspace(ctx context.Context, in *GetUserRoleInWorkspaceRequest, opts ...grpc.CallOption) (*GetUserRoleInWorkspaceResponse, error)
	CheckRoleValidForResource(ctx context.Context, in *CheckRoleValidForResourceRequest, opts ...grpc.CallOption) (*CheckRoleValidForResourceResponse, error)
	CheckUserHasAccessToProject(ctx context.Context, in *CheckUserHasAccessToProjectRequest, opts ...grpc.CallOption) (*CheckRoleValidForResourceResponse, error)
	CreateNewRole(ctx context.Context, in *CreateNewRoleRequest, opts ...grpc.CallOption) (*CreateNewRoleResponse, error)
	GetWorkspaceMembers(ctx context.Context, in *GetWorkspaceMembersRequest, opts ...grpc.CallOption) (*GetWorkspaceMembersResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	GetProjectTasks(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*GetProjectTasksResponse, error)
	CreateProjectDocument(ctx context.Context, in *CreateProjectDocumentRequest, opts ...grpc.CallOption) (*CreateProjectDocumentResponse, error)
	GetProjectDocuments(ctx context.Context, in *GetProjectDocumentsRequest, opts ...grpc.CallOption) (*GetProjectDocumentsResponse, error)
	GetProjectDocumentDetails(ctx context.Context, in *GetProjectDocumentDetailsRequest, opts ...grpc.CallOption) (*GetProjectDocumentDetailsResponse, error)
	UpdateProjectDocumentDetails(ctx context.Context, in *UpdateProjectDocumentDetailsRequest, opts ...grpc.CallOption) (*UpdateProjectDocumentDetailsResponse, error)
	GetProjectTaskDetails(ctx context.Context, in *GetProjectTaskDetailsRequest, opts ...grpc.CallOption) (*GetProjectTaskDetailsResponse, error)
}

type workspacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspacesServiceClient(cc grpc.ClientConnInterface) WorkspacesServiceClient {
	return &workspacesServiceClient{cc}
}

func (c *workspacesServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetWorkspacesByUserId(ctx context.Context, in *GetWorkspacesByUserIdRequest, opts ...grpc.CallOption) (*GetWorkspacesByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspacesByUserIdResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetWorkspacesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetRoleIdOfUserWorkspaces(ctx context.Context, in *GetRoleIdOfUserWorkspacesRequest, opts ...grpc.CallOption) (*GetRoleIdOfUserWorkspacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleIdOfUserWorkspacesResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetRoleIdOfUserWorkspaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetWorkspaceDetails(ctx context.Context, in *GetWorkspaceDetailsRequest, opts ...grpc.CallOption) (*GetWorkspaceDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceDetailsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetWorkspaceDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRolesRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceRolesResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetWorkspaceRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CreateCalendarEvent(ctx context.Context, in *CreateCalendarEventRequest, opts ...grpc.CallOption) (*CreateCalendarEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCalendarEventResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateCalendarEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectsByWorkspaceId(ctx context.Context, in *GetProjectsByWorkspaceIdRequest, opts ...grpc.CallOption) (*GetProjectsByWorkspaceIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectsByWorkspaceIdResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectsByWorkspaceId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*GetProjectDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectDetailsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetPermissions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) UpdateRolePermission(ctx context.Context, in *UpdateRolePermissionRequest, opts ...grpc.CallOption) (*UpdateRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRolePermissionResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_UpdateRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetUserRoleInWorkspace(ctx context.Context, in *GetUserRoleInWorkspaceRequest, opts ...grpc.CallOption) (*GetUserRoleInWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleInWorkspaceResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetUserRoleInWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CheckRoleValidForResource(ctx context.Context, in *CheckRoleValidForResourceRequest, opts ...grpc.CallOption) (*CheckRoleValidForResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRoleValidForResourceResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CheckRoleValidForResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CheckUserHasAccessToProject(ctx context.Context, in *CheckUserHasAccessToProjectRequest, opts ...grpc.CallOption) (*CheckRoleValidForResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRoleValidForResourceResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CheckUserHasAccessToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CreateNewRole(ctx context.Context, in *CreateNewRoleRequest, opts ...grpc.CallOption) (*CreateNewRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewRoleResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateNewRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetWorkspaceMembers(ctx context.Context, in *GetWorkspaceMembersRequest, opts ...grpc.CallOption) (*GetWorkspaceMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceMembersResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetWorkspaceMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectTasks(ctx context.Context, in *GetProjectTasksRequest, opts ...grpc.CallOption) (*GetProjectTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectTasksResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) CreateProjectDocument(ctx context.Context, in *CreateProjectDocumentRequest, opts ...grpc.CallOption) (*CreateProjectDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectDocumentResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_CreateProjectDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectDocuments(ctx context.Context, in *GetProjectDocumentsRequest, opts ...grpc.CallOption) (*GetProjectDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectDocumentsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectDocumentDetails(ctx context.Context, in *GetProjectDocumentDetailsRequest, opts ...grpc.CallOption) (*GetProjectDocumentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectDocumentDetailsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectDocumentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) UpdateProjectDocumentDetails(ctx context.Context, in *UpdateProjectDocumentDetailsRequest, opts ...grpc.CallOption) (*UpdateProjectDocumentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectDocumentDetailsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_UpdateProjectDocumentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspacesServiceClient) GetProjectTaskDetails(ctx context.Context, in *GetProjectTaskDetailsRequest, opts ...grpc.CallOption) (*GetProjectTaskDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectTaskDetailsResponse)
	err := c.cc.Invoke(ctx, WorkspacesService_GetProjectTaskDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspacesServiceServer is the server API for WorkspacesService service.
// All implementations must embed UnimplementedWorkspacesServiceServer
// for forward compatibility
type WorkspacesServiceServer interface {
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	GetWorkspacesByUserId(context.Context, *GetWorkspacesByUserIdRequest) (*GetWorkspacesByUserIdResponse, error)
	GetRoleIdOfUserWorkspaces(context.Context, *GetRoleIdOfUserWorkspacesRequest) (*GetRoleIdOfUserWorkspacesResponse, error)
	GetWorkspaceDetails(context.Context, *GetWorkspaceDetailsRequest) (*GetWorkspaceDetailsResponse, error)
	GetWorkspaceRoles(context.Context, *GetWorkspaceRolesRequest) (*GetWorkspaceRolesResponse, error)
	CreateCalendarEvent(context.Context, *CreateCalendarEventRequest) (*CreateCalendarEventResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetProjectsByWorkspaceId(context.Context, *GetProjectsByWorkspaceIdRequest) (*GetProjectsByWorkspaceIdResponse, error)
	GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*GetProjectDetailsResponse, error)
	GetPermissions(context.Context, *EmptyRequest) (*GetPermissionsResponse, error)
	UpdateRolePermission(context.Context, *UpdateRolePermissionRequest) (*UpdateRolePermissionResponse, error)
	GetUserRoleInWorkspace(context.Context, *GetUserRoleInWorkspaceRequest) (*GetUserRoleInWorkspaceResponse, error)
	CheckRoleValidForResource(context.Context, *CheckRoleValidForResourceRequest) (*CheckRoleValidForResourceResponse, error)
	CheckUserHasAccessToProject(context.Context, *CheckUserHasAccessToProjectRequest) (*CheckRoleValidForResourceResponse, error)
	CreateNewRole(context.Context, *CreateNewRoleRequest) (*CreateNewRoleResponse, error)
	GetWorkspaceMembers(context.Context, *GetWorkspaceMembersRequest) (*GetWorkspaceMembersResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	GetProjectTasks(context.Context, *GetProjectTasksRequest) (*GetProjectTasksResponse, error)
	CreateProjectDocument(context.Context, *CreateProjectDocumentRequest) (*CreateProjectDocumentResponse, error)
	GetProjectDocuments(context.Context, *GetProjectDocumentsRequest) (*GetProjectDocumentsResponse, error)
	GetProjectDocumentDetails(context.Context, *GetProjectDocumentDetailsRequest) (*GetProjectDocumentDetailsResponse, error)
	UpdateProjectDocumentDetails(context.Context, *UpdateProjectDocumentDetailsRequest) (*UpdateProjectDocumentDetailsResponse, error)
	GetProjectTaskDetails(context.Context, *GetProjectTaskDetailsRequest) (*GetProjectTaskDetailsResponse, error)
	mustEmbedUnimplementedWorkspacesServiceServer()
}

// UnimplementedWorkspacesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspacesServiceServer struct {
}

func (UnimplementedWorkspacesServiceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetWorkspacesByUserId(context.Context, *GetWorkspacesByUserIdRequest) (*GetWorkspacesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspacesByUserId not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetRoleIdOfUserWorkspaces(context.Context, *GetRoleIdOfUserWorkspacesRequest) (*GetRoleIdOfUserWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleIdOfUserWorkspaces not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetWorkspaceDetails(context.Context, *GetWorkspaceDetailsRequest) (*GetWorkspaceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceDetails not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetWorkspaceRoles(context.Context, *GetWorkspaceRolesRequest) (*GetWorkspaceRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoles not implemented")
}
func (UnimplementedWorkspacesServiceServer) CreateCalendarEvent(context.Context, *CreateCalendarEventRequest) (*CreateCalendarEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendarEvent not implemented")
}
func (UnimplementedWorkspacesServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectsByWorkspaceId(context.Context, *GetProjectsByWorkspaceIdRequest) (*GetProjectsByWorkspaceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByWorkspaceId not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*GetProjectDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDetails not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetPermissions(context.Context, *EmptyRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedWorkspacesServiceServer) UpdateRolePermission(context.Context, *UpdateRolePermissionRequest) (*UpdateRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePermission not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetUserRoleInWorkspace(context.Context, *GetUserRoleInWorkspaceRequest) (*GetUserRoleInWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleInWorkspace not implemented")
}
func (UnimplementedWorkspacesServiceServer) CheckRoleValidForResource(context.Context, *CheckRoleValidForResourceRequest) (*CheckRoleValidForResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoleValidForResource not implemented")
}
func (UnimplementedWorkspacesServiceServer) CheckUserHasAccessToProject(context.Context, *CheckUserHasAccessToProjectRequest) (*CheckRoleValidForResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserHasAccessToProject not implemented")
}
func (UnimplementedWorkspacesServiceServer) CreateNewRole(context.Context, *CreateNewRoleRequest) (*CreateNewRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRole not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetWorkspaceMembers(context.Context, *GetWorkspaceMembersRequest) (*GetWorkspaceMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceMembers not implemented")
}
func (UnimplementedWorkspacesServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedWorkspacesServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectTasks(context.Context, *GetProjectTasksRequest) (*GetProjectTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTasks not implemented")
}
func (UnimplementedWorkspacesServiceServer) CreateProjectDocument(context.Context, *CreateProjectDocumentRequest) (*CreateProjectDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectDocument not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectDocuments(context.Context, *GetProjectDocumentsRequest) (*GetProjectDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDocuments not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectDocumentDetails(context.Context, *GetProjectDocumentDetailsRequest) (*GetProjectDocumentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDocumentDetails not implemented")
}
func (UnimplementedWorkspacesServiceServer) UpdateProjectDocumentDetails(context.Context, *UpdateProjectDocumentDetailsRequest) (*UpdateProjectDocumentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectDocumentDetails not implemented")
}
func (UnimplementedWorkspacesServiceServer) GetProjectTaskDetails(context.Context, *GetProjectTaskDetailsRequest) (*GetProjectTaskDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTaskDetails not implemented")
}
func (UnimplementedWorkspacesServiceServer) mustEmbedUnimplementedWorkspacesServiceServer() {}

// UnsafeWorkspacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspacesServiceServer will
// result in compilation errors.
type UnsafeWorkspacesServiceServer interface {
	mustEmbedUnimplementedWorkspacesServiceServer()
}

func RegisterWorkspacesServiceServer(s grpc.ServiceRegistrar, srv WorkspacesServiceServer) {
	s.RegisterService(&WorkspacesService_ServiceDesc, srv)
}

func _WorkspacesService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetWorkspacesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspacesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetWorkspacesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetWorkspacesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetWorkspacesByUserId(ctx, req.(*GetWorkspacesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetRoleIdOfUserWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleIdOfUserWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetRoleIdOfUserWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetRoleIdOfUserWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetRoleIdOfUserWorkspaces(ctx, req.(*GetRoleIdOfUserWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetWorkspaceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetWorkspaceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetWorkspaceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetWorkspaceDetails(ctx, req.(*GetWorkspaceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetWorkspaceRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetWorkspaceRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetWorkspaceRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetWorkspaceRoles(ctx, req.(*GetWorkspaceRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CreateCalendarEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateCalendarEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateCalendarEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateCalendarEvent(ctx, req.(*CreateCalendarEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectsByWorkspaceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsByWorkspaceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectsByWorkspaceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectsByWorkspaceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectsByWorkspaceId(ctx, req.(*GetProjectsByWorkspaceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectDetails(ctx, req.(*GetProjectDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetPermissions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_UpdateRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).UpdateRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_UpdateRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).UpdateRolePermission(ctx, req.(*UpdateRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetUserRoleInWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleInWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetUserRoleInWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetUserRoleInWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetUserRoleInWorkspace(ctx, req.(*GetUserRoleInWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CheckRoleValidForResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleValidForResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CheckRoleValidForResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CheckRoleValidForResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CheckRoleValidForResource(ctx, req.(*CheckRoleValidForResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CheckUserHasAccessToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserHasAccessToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CheckUserHasAccessToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CheckUserHasAccessToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CheckUserHasAccessToProject(ctx, req.(*CheckUserHasAccessToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CreateNewRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateNewRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateNewRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateNewRole(ctx, req.(*CreateNewRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetWorkspaceMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetWorkspaceMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetWorkspaceMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetWorkspaceMembers(ctx, req.(*GetWorkspaceMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectTasks(ctx, req.(*GetProjectTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_CreateProjectDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).CreateProjectDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_CreateProjectDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).CreateProjectDocument(ctx, req.(*CreateProjectDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectDocuments(ctx, req.(*GetProjectDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectDocumentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDocumentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectDocumentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectDocumentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectDocumentDetails(ctx, req.(*GetProjectDocumentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_UpdateProjectDocumentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectDocumentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).UpdateProjectDocumentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_UpdateProjectDocumentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).UpdateProjectDocumentDetails(ctx, req.(*UpdateProjectDocumentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspacesService_GetProjectTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTaskDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspacesServiceServer).GetProjectTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspacesService_GetProjectTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspacesServiceServer).GetProjectTaskDetails(ctx, req.(*GetProjectTaskDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspacesService_ServiceDesc is the grpc.ServiceDesc for WorkspacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.WorkspacesService",
	HandlerType: (*WorkspacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkspace",
			Handler:    _WorkspacesService_CreateWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspacesByUserId",
			Handler:    _WorkspacesService_GetWorkspacesByUserId_Handler,
		},
		{
			MethodName: "GetRoleIdOfUserWorkspaces",
			Handler:    _WorkspacesService_GetRoleIdOfUserWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspaceDetails",
			Handler:    _WorkspacesService_GetWorkspaceDetails_Handler,
		},
		{
			MethodName: "GetWorkspaceRoles",
			Handler:    _WorkspacesService_GetWorkspaceRoles_Handler,
		},
		{
			MethodName: "CreateCalendarEvent",
			Handler:    _WorkspacesService_CreateCalendarEvent_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _WorkspacesService_CreateProject_Handler,
		},
		{
			MethodName: "GetProjectsByWorkspaceId",
			Handler:    _WorkspacesService_GetProjectsByWorkspaceId_Handler,
		},
		{
			MethodName: "GetProjectDetails",
			Handler:    _WorkspacesService_GetProjectDetails_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _WorkspacesService_GetPermissions_Handler,
		},
		{
			MethodName: "UpdateRolePermission",
			Handler:    _WorkspacesService_UpdateRolePermission_Handler,
		},
		{
			MethodName: "GetUserRoleInWorkspace",
			Handler:    _WorkspacesService_GetUserRoleInWorkspace_Handler,
		},
		{
			MethodName: "CheckRoleValidForResource",
			Handler:    _WorkspacesService_CheckRoleValidForResource_Handler,
		},
		{
			MethodName: "CheckUserHasAccessToProject",
			Handler:    _WorkspacesService_CheckUserHasAccessToProject_Handler,
		},
		{
			MethodName: "CreateNewRole",
			Handler:    _WorkspacesService_CreateNewRole_Handler,
		},
		{
			MethodName: "GetWorkspaceMembers",
			Handler:    _WorkspacesService_GetWorkspaceMembers_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _WorkspacesService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _WorkspacesService_UpdateTask_Handler,
		},
		{
			MethodName: "GetProjectTasks",
			Handler:    _WorkspacesService_GetProjectTasks_Handler,
		},
		{
			MethodName: "CreateProjectDocument",
			Handler:    _WorkspacesService_CreateProjectDocument_Handler,
		},
		{
			MethodName: "GetProjectDocuments",
			Handler:    _WorkspacesService_GetProjectDocuments_Handler,
		},
		{
			MethodName: "GetProjectDocumentDetails",
			Handler:    _WorkspacesService_GetProjectDocumentDetails_Handler,
		},
		{
			MethodName: "UpdateProjectDocumentDetails",
			Handler:    _WorkspacesService_UpdateProjectDocumentDetails_Handler,
		},
		{
			MethodName: "GetProjectTaskDetails",
			Handler:    _WorkspacesService_GetProjectTaskDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/projectrol.proto",
}

const (
	NotificationsService_CreateUserNotificationsSettings_FullMethodName = "/protos.NotificationsService/CreateUserNotificationsSettings"
	NotificationsService_UpdateUserNotificationsSettings_FullMethodName = "/protos.NotificationsService/UpdateUserNotificationsSettings"
	NotificationsService_GetUserNotificationsSettings_FullMethodName    = "/protos.NotificationsService/GetUserNotificationsSettings"
)

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	CreateUserNotificationsSettings(ctx context.Context, in *UpsertUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*UpsertUserNotificationsSettingsResponse, error)
	UpdateUserNotificationsSettings(ctx context.Context, in *UpsertUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*UpsertUserNotificationsSettingsResponse, error)
	GetUserNotificationsSettings(ctx context.Context, in *GetUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*GetUserNotificationsSettingsResponse, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) CreateUserNotificationsSettings(ctx context.Context, in *UpsertUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*UpsertUserNotificationsSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertUserNotificationsSettingsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_CreateUserNotificationsSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpdateUserNotificationsSettings(ctx context.Context, in *UpsertUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*UpsertUserNotificationsSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertUserNotificationsSettingsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_UpdateUserNotificationsSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetUserNotificationsSettings(ctx context.Context, in *GetUserNotificationsSettingsRequest, opts ...grpc.CallOption) (*GetUserNotificationsSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserNotificationsSettingsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_GetUserNotificationsSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations must embed UnimplementedNotificationsServiceServer
// for forward compatibility
type NotificationsServiceServer interface {
	CreateUserNotificationsSettings(context.Context, *UpsertUserNotificationsSettingsRequest) (*UpsertUserNotificationsSettingsResponse, error)
	UpdateUserNotificationsSettings(context.Context, *UpsertUserNotificationsSettingsRequest) (*UpsertUserNotificationsSettingsResponse, error)
	GetUserNotificationsSettings(context.Context, *GetUserNotificationsSettingsRequest) (*GetUserNotificationsSettingsResponse, error)
	mustEmbedUnimplementedNotificationsServiceServer()
}

// UnimplementedNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (UnimplementedNotificationsServiceServer) CreateUserNotificationsSettings(context.Context, *UpsertUserNotificationsSettingsRequest) (*UpsertUserNotificationsSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNotificationsSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) UpdateUserNotificationsSettings(context.Context, *UpsertUserNotificationsSettingsRequest) (*UpsertUserNotificationsSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNotificationsSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) GetUserNotificationsSettings(context.Context, *GetUserNotificationsSettingsRequest) (*GetUserNotificationsSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationsSettings not implemented")
}
func (UnimplementedNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_CreateUserNotificationsSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserNotificationsSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).CreateUserNotificationsSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_CreateUserNotificationsSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).CreateUserNotificationsSettings(ctx, req.(*UpsertUserNotificationsSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpdateUserNotificationsSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserNotificationsSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpdateUserNotificationsSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_UpdateUserNotificationsSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpdateUserNotificationsSettings(ctx, req.(*UpsertUserNotificationsSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetUserNotificationsSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetUserNotificationsSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_GetUserNotificationsSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetUserNotificationsSettings(ctx, req.(*GetUserNotificationsSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserNotificationsSettings",
			Handler:    _NotificationsService_CreateUserNotificationsSettings_Handler,
		},
		{
			MethodName: "UpdateUserNotificationsSettings",
			Handler:    _NotificationsService_UpdateUserNotificationsSettings_Handler,
		},
		{
			MethodName: "GetUserNotificationsSettings",
			Handler:    _NotificationsService_GetUserNotificationsSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/projectrol.proto",
}
